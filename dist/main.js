/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("var start;\r\nvar canvas;\r\nvar ctx;\r\nvar lastFrame = 0;\r\nvar row = 0;\r\nvar backgroundColor = \"#000000\";\r\nvar cellColor = \"#03A062\";\r\nvar direction = \"down\";\r\nvar showGrid = true;\r\nvar boxSize = 10;\r\nvar frameCadence = 100;\r\nvar paused = true;\r\nvar boxes = [[], []];\r\nvar buttonBarHeight = 69;\r\nvar buttonWidth;\r\nvar buttonHeight;\r\nvar startPause;\r\n// start/pause\r\n// reset\r\n// faster\r\n// slower\r\n// step forward\r\nvar resizeCanvas = function () {\r\n    canvas.height = window.innerHeight - 4;\r\n    canvas.width = window.innerWidth;\r\n};\r\nvar clear = function () {\r\n    ctx.beginPath();\r\n    ctx.rect(0, 0, canvas.width, canvas.height);\r\n    ctx.fillStyle = backgroundColor;\r\n    ctx.fill();\r\n};\r\nvar renderGrid = function () {\r\n    if (!showGrid)\r\n        return;\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = \"#999999\";\r\n    // draw vertical lines\r\n    for (var i = 0; i <= canvas.width; i += boxSize) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(i, 0);\r\n        ctx.lineTo(i, Math.floor((canvas.height - buttonBarHeight - boxSize) / boxSize) *\r\n            boxSize);\r\n        ctx.stroke();\r\n    }\r\n    // draw horizontal lines\r\n    for (var i = 0; i < canvas.height - buttonBarHeight; i += boxSize) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, i);\r\n        ctx.lineTo(canvas.width, i);\r\n        ctx.stroke();\r\n    }\r\n};\r\nvar getNeighbors = function (boxes, x, y) {\r\n    var counter = 0;\r\n    // left top\r\n    if (x > 0 && y > 0 && boxes[x - 1][y - 1])\r\n        counter++;\r\n    // left middle\r\n    if (x > 0 && y < boxes[x].length - 1 && boxes[x - 1][y])\r\n        counter++;\r\n    // left bottom\r\n    if (x > 0 && boxes[x - 1][y + 1])\r\n        counter++;\r\n    // middle top\r\n    if (y > 0 && boxes[x][y - 1])\r\n        counter++;\r\n    // middle bottom\r\n    if (y < boxes[x].length - 1 && boxes[x][y + 1])\r\n        counter++;\r\n    // right top\r\n    if (y > 0 && x < boxes.length - 1 && boxes[x + 1][y - 1])\r\n        counter++;\r\n    // right middle\r\n    if (x < boxes.length - 1 && boxes[x + 1][y])\r\n        counter++;\r\n    // right bottom\r\n    if (x < boxes.length - 1 && y < boxes[x].length - 1 && boxes[x + 1][y + 1])\r\n        counter++;\r\n    return counter;\r\n};\r\nvar setBoxes = function () {\r\n    var xBoxes = Math.floor(canvas.width / boxSize);\r\n    var yBoxes = Math.floor((canvas.height - buttonBarHeight) / boxSize);\r\n    for (var x = 0; x <= xBoxes; x++) {\r\n        boxes[x] = [];\r\n        for (var y = 0; y <= yBoxes; y++) {\r\n            boxes[x][y] = false;\r\n        }\r\n    }\r\n    // for (\r\n    // \tlet x = Math.floor(xBoxes / 3);\r\n    // \tx <= xBoxes - Math.floor(xBoxes / 3);\r\n    // \tx++\r\n    // ) {\r\n    // \tboxes[x] = []\r\n    // \tfor (\r\n    // \t\tlet y = Math.floor(yBoxes / 3);\r\n    // \t\ty <= yBoxes - Math.floor(yBoxes / 3);\r\n    // \t\ty++\r\n    // \t) {\r\n    // \t\tif (Math.random() > 0.5) boxes[x][y] = true\r\n    // \t}\r\n    // }\r\n};\r\nvar calculateNewBoxes = function () {\r\n    if (paused)\r\n        return;\r\n    var newBoxes = [];\r\n    // fill newBoxes with false\r\n    for (var i = 0; i < boxes.length; i++) {\r\n        newBoxes.push([]);\r\n        for (var j = 0; j < boxes[i].length; j++)\r\n            newBoxes[i].push(false);\r\n    }\r\n    for (var x = 0; x < boxes.length; x++) {\r\n        for (var y = 0; y < boxes[x].length; y++) {\r\n            var n = getNeighbors(boxes, x, y);\r\n            if (n < 2 || n > 3)\r\n                newBoxes[x][y] = false;\r\n            if ((boxes[x][y] === true && n === 2) || n === 3)\r\n                newBoxes[x][y] = true;\r\n            if (boxes[x][y] === false && n === 3)\r\n                newBoxes[x][y] = true;\r\n        }\r\n    }\r\n    boxes = newBoxes.map(function (x) { return x; });\r\n};\r\nvar drawBoxes = function () {\r\n    ctx.fillStyle = cellColor;\r\n    for (var x = 0; x < boxes.length; x++) {\r\n        for (var y = 0; y < boxes[x].length; y++) {\r\n            if (boxes[x][y] === true) {\r\n                ctx.fillRect(x * boxSize, y * boxSize, boxSize, boxSize);\r\n            }\r\n        }\r\n    }\r\n};\r\nvar drawButtons = function () {\r\n    var buttonYMargin = 10;\r\n    buttonHeight = buttonBarHeight - buttonYMargin * 2;\r\n    var buttonXSpacing = 30;\r\n    buttonWidth = canvas.width / 5;\r\n    ctx.fillStyle = \"green\";\r\n    startPause = {\r\n        xStart: buttonXSpacing,\r\n        yStart: canvas.height - buttonBarHeight + buttonYMargin / 2\r\n    };\r\n    ctx.rect(startPause.xStart, startPause.yStart, buttonWidth, buttonHeight);\r\n    ctx.fill();\r\n    var textSize = 30;\r\n    ctx.font = \"\".concat(textSize, \"px Courier\");\r\n    ctx.textAlign = \"center\";\r\n    ctx.fillStyle = \"white\";\r\n    ctx.fillText(\"Go\", startPause.xStart + buttonWidth / 2, startPause.yStart + buttonHeight / 2 + textSize / 4);\r\n};\r\nvar renderThings = function (timeStamp) {\r\n    if (start === undefined) {\r\n        start = timeStamp;\r\n    }\r\n    if (timeStamp - lastFrame > frameCadence) {\r\n        lastFrame = timeStamp;\r\n        clear();\r\n        renderGrid();\r\n        calculateNewBoxes();\r\n        drawBoxes();\r\n        drawButtons();\r\n    }\r\n    window.requestAnimationFrame(renderThings);\r\n};\r\nvar handleClick = function (event) {\r\n    var pageX = event.pageX, pageY = event.pageY;\r\n    if (pageY > canvas.height - buttonBarHeight) {\r\n        if (pageX > startPause.xStart &&\r\n            pageY > startPause.yStart &&\r\n            pageX < startPause.xStart + buttonWidth &&\r\n            pageY < startPause.yStart + buttonHeight) {\r\n            paused = !paused;\r\n        }\r\n        return;\r\n    }\r\n    var boxX = Math.floor(pageX / boxSize);\r\n    var boxY = Math.floor(pageY / boxSize);\r\n    boxes[boxX][boxY] = !boxes[boxX][boxY];\r\n};\r\nvar initialize = function () {\r\n    canvas = document.createElement(\"canvas\");\r\n    var body = document.getElementById(\"body\");\r\n    body.style.margin = \"0px\";\r\n    body.style.backgroundColor = backgroundColor;\r\n    resizeCanvas();\r\n    canvas.id = \"canvas\";\r\n    body.appendChild(canvas);\r\n    ctx = canvas.getContext(\"2d\");\r\n    canvas.addEventListener(\"click\", handleClick);\r\n    setBoxes();\r\n    window.requestAnimationFrame(renderThings);\r\n};\r\ndocument.body.onload = initialize;\r\nwindow.onresize = resizeCanvas;\r\n\n\n//# sourceURL=webpack://webpack-demo/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;